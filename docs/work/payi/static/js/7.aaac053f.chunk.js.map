{"version":3,"sources":["containers/Payments/payments.style.js","componants/DatePickerField.js","containers/Payments/data.js","containers/Payments/dataTable.style.js","containers/Payments/PaymentTbl.js","containers/Payments/index.js"],"names":["PaymentsWrapper","styled","div","theme","colors","white","text","Section1","font","PaymnetForm","secondary","PaymnetTbl","grayLight","DatePickerField","props","setFieldValue","useFormikContext","useField","field","selected","value","Date","onChange","val","name","id","requestedTo","memo","dueDate","paymentType","amount","status","DTWrapper","DTContainer","createTheme","primary","background","default","context","divider","action","button","hover","disabled","columns","selector","sortable","PaymentTable","title","data","defaultSortFieldId","pagination","selectableRows","SignupSchema","PaymentsAction","changeTransaction","addTransaction","editTransaction","deleteTransaction","viewChange","yup","shape","user","required","currency","email","date","Payments","Cards","Provider","color","className","type","initialValues","validationSchema","onSubmit","values","console","log","errors","touched","htmlFor","as","Component","connect","state"],"mappings":"uMAaeA,G,MARSC,UAAOC,IAAV,wKAII,qBAAGC,MAAkBC,OAAOC,SAC1C,qBAAGF,MAAkBC,OAAOE,SAK1BC,EAAWN,UAAOC,IAAV,iOAGF,qBAAGC,MAAkBC,OAAOC,SAC9B,qBAAGF,MAAkBK,QASzBC,EAAcR,UAAOC,IAAV,gcAEC,qBAAGC,MAAkBC,OAAOM,aACrC,qBAAGP,MAAkBC,OAAOC,SAC3B,qBAAGF,MAAkBK,QAoBzBG,EAAaV,UAAOC,IAAV,6UAMC,qBAAGC,MAAkBC,OAAOQ,aAC3B,qBAAGT,MAAkBC,OAAOM,aACrC,qBAAGP,MAAkBC,OAAOC,SAC3B,qBAAGF,MAAkBK,Q,GAMdP,UAAOC,IAAV,4MAEI,qBAAGC,MAAkBC,OAAOM,aAClC,qBAAGP,MAAkBC,OAAOC,SAC9B,qBAAGF,MAAkBK,Q,gFCnEzBK,EAAkB,SAAC,GAAkB,IAAbC,EAAY,oBACvCC,EAAkBC,cAAlBD,cACR,EAAgBE,YAASH,GAAlBI,EAAP,oBACA,OACE,cAAC,IAAD,uCACMA,GACAJ,GAFN,IAGEK,SAAWD,EAAME,OAAS,IAAIC,KAAKH,EAAME,QAAW,KACpDE,SAAU,SAACC,GACTR,EAAcG,EAAMM,KAAMD,Q,kBCbnB,GACb,CACEE,GAAI,EACJC,YAAa,sBACbC,KAAM,cACNC,QAAS,mBACTC,YAAa,MACbC,OAAQ,IACRC,OAAQ,cAGV,CACEN,GAAI,EACJC,YAAa,sBACbC,KAAM,cACNC,QAAS,mBACTC,YAAa,MACbC,OAAQ,IACRC,OAAQ,cAEV,CACEN,GAAI,EACJC,YAAa,sBACbC,KAAM,cACNC,QAAS,mBACTC,YAAa,MACbC,OAAQ,IACRC,OAAQ,cAEV,CACEN,GAAI,EACJC,YAAa,sBACbC,KAAM,cACNC,QAAS,mBACTC,YAAa,MACbC,OAAQ,IACRC,OAAQ,cAEV,CACEN,GAAI,EACJC,YAAa,sBACbC,KAAM,cACNC,QAAS,mBACTC,YAAa,MACbC,OAAQ,IACRC,OAAQ,eCjCGC,EAHG/B,UAAOC,IAAV,8DAIF+B,EAAchC,UAAOC,IAAV,+OAIP,qBAAGC,MAAkBK,QACnB,qBAAGL,MAAkBC,OAAOC,SCN/C6B,sBAAY,YAAa,CACvB5B,KAAM,CACJ6B,QAAS,UACTzB,UAAW,WAEb0B,WAAY,CACVC,QAAS,WAEXC,QAAS,CACPF,WAAY,UACZ9B,KAAM,WAERiC,QAAS,CACPF,QAAS,WAEXG,OAAQ,CACNC,OAAQ,kBACRC,MAAO,kBACPC,SAAU,qBAGd,IAAMC,EAAU,CACd,CACEpB,KAAM,eACNqB,SAAU,cACVC,UAAU,GAEZ,CACEtB,KAAM,OACNqB,SAAU,OACVC,UAAU,GAEZ,CACEtB,KAAM,WACNqB,SAAU,UACVC,UAAU,GAGZ,CACEtB,KAAM,eACNqB,SAAU,cACVC,UAAU,GAGZ,CACEtB,KAAM,UACNqB,SAAU,SACVC,UAAU,GAGZ,CACEtB,KAAM,SACNqB,SAAU,SACVC,UAAU,IAoBCC,EAhBM,SAACjC,GACpB,OACE,cAAC,EAAD,UACE,cAACmB,EAAD,UACE,cAAC,IAAD,CACEe,MAAM,GACNJ,QAASA,EACTK,KAAMA,EACNC,mBAAoB,EACpBC,YAAU,EACVC,gBAAc,S,eCnDlBC,GAFFC,IALFC,kBAKED,IAJFE,eAIEF,IAHFG,gBAGEH,IAFFI,kBAEEJ,IADFK,WAGmBC,MAAaC,MAAM,CACtCC,KAAMF,MAAaG,SAAS,YAC5BC,SAAUJ,MAAaG,SAAS,YAChCjC,OAAQ8B,MAAaG,SAAS,YAC9BE,MAAOL,MAAaK,MAAM,iBAAiBF,SAAS,YACpDpC,KAAMiC,MAAaG,SAAS,YAC5BG,KAAMN,MAAaG,SAAS,eAExBI,E,4JACJ,WACE,OACE,eAAC,EAAD,WACE,cAACC,EAAA,EAAD,IAEA,eAAC7D,EAAD,WACE,eAACE,EAAD,WACE,cAAC,IAAD,qCACA,eAAC,IAAY4D,SAAb,CACEjD,MAAO,CAAEkD,MAAO,QAASC,UAAW,WADtC,UAGE,yBAAQC,KAAK,SAAb,UACE,cAAC,IAAD,IADF,oBAIA,yBAAQA,KAAK,SAAb,UACE,cAAC,IAAD,IADF,qBAKF,cAAC,IAAD,CACEC,cAAe,CACbX,KAAM,GACNG,MAAO,GACPD,SAAU,GACVlC,OAAQ,GACRH,KAAM,GACNuC,KAAM,IAERQ,iBAAkBrB,EAClBsB,SAAU,SAACC,GAETC,QAAQC,IAAIF,IAZhB,SAeG,gBAAGG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,WACE,eAAC,IAAD,WACE,uBAAOC,QAAQ,OAAf,iDAGA,eAAC,IAAD,CACEzD,KAAK,OACL0D,GAAG,SACHX,UAAWQ,EAAOjB,MAAQkB,EAAQlB,KAAO,MAAQ,KAHnD,UAKE,wBAAQ1C,MAAM,GAAd,uBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,eAAd,gCAOJ,eAAC,IAAD,WACE,uBAAO6D,QAAQ,OAAf,uCAEA,cAAC,IAAD,CACEzD,KAAK,QACLgD,KAAK,QACLD,UAAWQ,EAAOd,OAASe,EAAQf,MAAQ,MAAQ,UAOvD,eAAC,IAAD,WACE,uBAAOgB,QAAQ,OAAf,kCAEA,eAAC,IAAD,CACEzD,KAAK,WACL0D,GAAG,SACHX,UACEQ,EAAOf,UAAYgB,EAAQhB,SAAW,MAAQ,KAJlD,UAOE,wBAAQ5C,MAAM,GAAd,sBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,uBAOJ,eAAC,IAAD,WACE,uBAAO6D,QAAQ,OAAf,oBAEA,cAAC,IAAD,CACEzD,KAAK,SACL+C,UAAWQ,EAAOjD,QAAUkD,EAAQlD,OAAS,MAAQ,UAOzD,eAAC,IAAD,WACE,uBAAOmD,QAAQ,OAAf,0BAEA,cAAC,IAAD,CACEC,GAAG,WACH1D,KAAK,OACL+C,UAAWQ,EAAOpD,MAAQqD,EAAQrD,KAAO,MAAQ,UAIrD,eAAC,IAAD,WACE,uBAAOsD,QAAQ,OAAf,sBAEA,cAAC,EAAD,CACEzD,KAAK,OACL+C,UAAWQ,EAAOb,MAAQc,EAAQd,KAAO,MAAQ,UAGrD,wBAAQM,KAAK,SAAb,sCAKR,eAAC7D,EAAD,WACE,cAAC,IAAD,6BACA,cAAC,EAAD,iB,GA7HWwE,aAwIRC,6BAHf,SAAyBC,GACvB,MAAO,KAE+B,GAAzBD,CAA6BjB","file":"static/js/7.aaac053f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { palette } from \"styled-theme\";\r\n// import { transition, borderRadius } from \"../../settings/style-util\";\r\n// import WithDirection from \"../../settings/withDirection\";\r\n\r\nconst PaymentsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  // background-color: ${({ theme }) => theme.colors.white};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin: 0px;\r\n`;\r\nexport default PaymentsWrapper;\r\n\r\nexport const Section1 = styled.div`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  // background: ${({ theme }) => theme.colors.white};\r\n  font-family: ${({ theme }) => theme.font};\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  flex-direction: row;\r\n  // align-items: stretch;\r\n  width:100%;\r\n\r\n`;\r\n\r\nexport const PaymnetForm = styled.div`\r\n  border-radius: 4px;\r\n  // background-color: ${({ theme }) => theme.colors.secondary};\r\n  background: ${({ theme }) => theme.colors.white};\r\n  font-family: ${({ theme }) => theme.font};\r\n  width:30%;\r\n  justify-content: center;\r\n  align-content: center;\r\n  align-items: center;\r\n  // display: flex;\r\n  // flex-wrap: nowrap;\r\n  // flex-direction: row;\r\n  // align-items: center;\r\n  padding:12px;\r\n  margin: 5px 10px 5px 0px;\r\n\r\n  &:nth-child(1) {\r\n      margin-left: 10px;\r\n  }\r\n  form{\r\n    margin:15px 0px;\r\n  }\r\n`;\r\n\r\nexport const PaymnetTbl = styled.div`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  width:70%;\r\n  margin: 5px 10px 5px 0px;\r\n    padding:12px;\r\n  // border:1px solid ${({ theme }) => theme.colors.grayLight};\r\n  // background-color: ${({ theme }) => theme.colors.secondary};\r\n  background: ${({ theme }) => theme.colors.white};\r\n  font-family: ${({ theme }) => theme.font};\r\n  // display: flex;\r\n  // flex-wrap: nowrap;\r\n  // flex-direction: row;\r\n  // align-items: stretch;\r\n`;\r\nexport const Section2 = styled.div`\r\n  border-radius: 4px;\r\n  // background-color: ${({ theme }) => theme.colors.secondary};\r\n  // background: ${({ theme }) => theme.colors.white};\r\n  font-family: ${({ theme }) => theme.font};\r\n  // flex-wrap: nowrap;\r\n  // flex-direction: row;\r\n  // align-items: stretch;\r\n`;\r\n","import React from \"react\";\r\nimport { useField, useFormikContext } from \"formik\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nexport const DatePickerField = ({ ...props }) => {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field] = useField(props);\r\n  return (\r\n    <DatePicker\r\n      {...field}\r\n      {...props}\r\n      selected={(field.value && new Date(field.value)) || null}\r\n      onChange={(val) => {\r\n        setFieldValue(field.name, val);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DatePickerField;\r\n","export default [\r\n  {\r\n    id: 1,\r\n    requestedTo: \"mukesh@coinlock.com\",\r\n    memo: \"Beetlejuice\",\r\n    dueDate: \"May 21st 8:31 pm\",\r\n    paymentType: \"BTC\",\r\n    amount: 0.03,\r\n    status: \"Tim Burton\",\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    requestedTo: \"mukesh@coinlock.com\",\r\n    memo: \"Beetlejuice\",\r\n    dueDate: \"May 21st 8:31 pm\",\r\n    paymentType: \"BTC\",\r\n    amount: 0.03,\r\n    status: \"Tim Burton\",\r\n  },\r\n  {\r\n    id: 3,\r\n    requestedTo: \"mukesh@coinlock.com\",\r\n    memo: \"Beetlejuice\",\r\n    dueDate: \"May 21st 8:31 pm\",\r\n    paymentType: \"BTC\",\r\n    amount: 0.03,\r\n    status: \"Tim Burton\",\r\n  },\r\n  {\r\n    id: 4,\r\n    requestedTo: \"mukesh@coinlock.com\",\r\n    memo: \"Beetlejuice\",\r\n    dueDate: \"May 21st 8:31 pm\",\r\n    paymentType: \"BTC\",\r\n    amount: 0.03,\r\n    status: \"Tim Burton\",\r\n  },\r\n  {\r\n    id: 5,\r\n    requestedTo: \"mukesh@coinlock.com\",\r\n    memo: \"Beetlejuice\",\r\n    dueDate: \"May 21st 8:31 pm\",\r\n    paymentType: \"BTC\",\r\n    amount: 0.03,\r\n    status: \"Tim Burton\",\r\n  },\r\n];\r\n","import styled from \"styled-components\";\r\nimport { palette } from \"styled-theme\";\r\n// import { transition, borderRadius } from '../../settings/style-util';\r\n// import WithDirection from '../../settings/withDirection';\r\nimport { Link } from \"react-router-dom\";\r\nimport { BiRestaurant } from \"react-icons/bi\";\r\n// import CLIcon from \"./gray-coinlock.png\";\r\n// import clSVG from \"./cl-icon.svg\";\r\n\r\nconst DTWrapper = styled.div`\r\n  // padding: 0px 10px 5px 10px;\r\n`;\r\nexport default DTWrapper;\r\nexport const DTContainer = styled.div`\r\n  // border-radius: 4px;\r\n  // overflow: hidden;\r\n  width: 100%;\r\n  font-family: ${({ theme }) => theme.font};\r\n  // background: ${({ theme }) => theme.colors.white};\r\n  // display: flex;\r\n  // flex-wrap: nowrap;\r\n  // flex-direction: row;\r\n  // align-items: stretch;\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\n// DATA TABLES\r\nimport DataTable, { createTheme } from \"react-data-table-component\";\r\nimport data from \"./data\";\r\n//CSS\r\nimport DTWrapper, {\r\n  DTContainer,\r\n  DataTableSec,\r\n  OrderSec,\r\n} from \"./dataTable.style\";\r\n//ICONS\r\n\r\ncreateTheme(\"solarized\", {\r\n  text: {\r\n    primary: \"#268bd2\",\r\n    secondary: \"#2aa198\",\r\n  },\r\n  background: {\r\n    default: \"#002b36\",\r\n  },\r\n  context: {\r\n    background: \"#cb4b16\",\r\n    text: \"#FFFFFF\",\r\n  },\r\n  divider: {\r\n    default: \"#073642\",\r\n  },\r\n  action: {\r\n    button: \"rgba(0,0,0,.54)\",\r\n    hover: \"rgba(0,0,0,.08)\",\r\n    disabled: \"rgba(0,0,0,.12)\",\r\n  },\r\n});\r\nconst columns = [\r\n  {\r\n    name: \"Requested To\",\r\n    selector: \"requestedTo\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Memo\",\r\n    selector: \"memo\",\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Due Date\",\r\n    selector: \"dueDate\",\r\n    sortable: true,\r\n  },\r\n\r\n  {\r\n    name: \"Payment Type\",\r\n    selector: \"paymentType\",\r\n    sortable: true,\r\n  },\r\n\r\n  {\r\n    name: \"Aamount\",\r\n    selector: \"amount\",\r\n    sortable: true,\r\n  },\r\n\r\n  {\r\n    name: \"Status\",\r\n    selector: \"status\",\r\n    sortable: true,\r\n  },\r\n];\r\n\r\nconst PaymentTable = (props) => {\r\n  return (\r\n    <DTWrapper>\r\n      <DTContainer>\r\n        <DataTable\r\n          title=\"\"\r\n          columns={columns}\r\n          data={data}\r\n          defaultSortFieldId={1}\r\n          pagination\r\n          selectableRows\r\n        />\r\n      </DTContainer>\r\n    </DTWrapper>\r\n  );\r\n};\r\nexport default PaymentTable;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PaymentsAction from \"../../redux/payments/actions\";\r\nimport PaymentsWrapper, {\r\n  Section1,\r\n  Section2,\r\n  PaymnetForm,\r\n  PaymnetTbl,\r\n} from \"./payments.style\";\r\nimport Cards from \"../../componants/Cards\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { FieldWrapper, SecTitle } from \"../../theme/GlobalStyles\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { DatePickerField } from \"./../../componants/DatePickerField\";\r\nimport PaymentTable from \"./PaymentTbl\";\r\nimport { FiArrowDownLeft, FiArrowUpRight } from \"react-icons/fi\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nconst {\r\n  changeTransaction,\r\n  addTransaction,\r\n  editTransaction,\r\n  deleteTransaction,\r\n  viewChange,\r\n} = PaymentsAction;\r\n\r\nconst SignupSchema = yup.object().shape({\r\n  user: yup.string().required(\"Required\"),\r\n  currency: yup.string().required(\"Required\"),\r\n  amount: yup.number().required(\"Required\"),\r\n  email: yup.string().email(\"Invalid email\").required(\"Required\"),\r\n  memo: yup.string().required(\"Required\"),\r\n  date: yup.string().required(\"Required\"),\r\n});\r\nclass Payments extends Component {\r\n  render() {\r\n    return (\r\n      <PaymentsWrapper>\r\n        <Cards />\r\n\r\n        <Section1>\r\n          <PaymnetForm>\r\n            <SecTitle>Send & Recive Payments</SecTitle>\r\n            <IconContext.Provider\r\n              value={{ color: \"white\", className: \"bigIcon\" }}\r\n            >\r\n              <button type=\"submit\">\r\n                <FiArrowDownLeft />\r\n                Recive Payment\r\n              </button>\r\n              <button type=\"submit\">\r\n                <FiArrowUpRight />\r\n                Send Payment\r\n              </button>\r\n            </IconContext.Provider>\r\n            <Formik\r\n              initialValues={{\r\n                user: \"\",\r\n                email: \"\",\r\n                currency: \"\",\r\n                amount: \"\",\r\n                memo: \"\",\r\n                date: \"\",\r\n              }}\r\n              validationSchema={SignupSchema}\r\n              onSubmit={(values) => {\r\n                // same shape as initial values\r\n                console.log(values);\r\n              }}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form>\r\n                  <FieldWrapper>\r\n                    <label htmlFor=\"user\">\r\n                      Who do you want to request payment?\r\n                    </label>\r\n                    <Field\r\n                      name=\"user\"\r\n                      as=\"select\"\r\n                      className={errors.user && touched.user ? \"err\" : null}\r\n                    >\r\n                      <option value=\"\">User type</option>\r\n                      <option value=\"coinlock\">coinlock</option>\r\n                      <option value=\"non-coinlock\">non-coinlock</option>\r\n                    </Field>\r\n                    {/* {errors.user && touched.user ? (\r\n                      <span>{errors.user}</span>\r\n                    ) : null} */}\r\n                  </FieldWrapper>\r\n\r\n                  <FieldWrapper>\r\n                    <label htmlFor=\"user\">Enter the sender email id</label>\r\n\r\n                    <Field\r\n                      name=\"email\"\r\n                      type=\"email\"\r\n                      className={errors.email && touched.email ? \"err\" : null}\r\n                    />\r\n                    {/* {errors.email && touched.email ? (\r\n                      <span>{errors.email}</span>\r\n                    ) : null} */}\r\n                  </FieldWrapper>\r\n\r\n                  <FieldWrapper>\r\n                    <label htmlFor=\"user\">Select payment type?</label>\r\n\r\n                    <Field\r\n                      name=\"currency\"\r\n                      as=\"select\"\r\n                      className={\r\n                        errors.currency && touched.currency ? \"err\" : null\r\n                      }\r\n                    >\r\n                      <option value=\"\">Currency</option>\r\n                      <option value=\"BTC\">BTC</option>\r\n                      <option value=\"USD\">USD</option>\r\n                    </Field>\r\n                    {/* {errors.currency && touched.currency ? (\r\n                      <span>{errors.currency}</span>\r\n                    ) : null} */}\r\n                  </FieldWrapper>\r\n\r\n                  <FieldWrapper>\r\n                    <label htmlFor=\"user\">Amount</label>\r\n\r\n                    <Field\r\n                      name=\"amount\"\r\n                      className={errors.amount && touched.amount ? \"err\" : null}\r\n                    />\r\n                    {/* {errors.amount && touched.amount ? (\r\n                      <span>{errors.amount}</span>\r\n                    ) : null} */}\r\n                  </FieldWrapper>\r\n\r\n                  <FieldWrapper>\r\n                    <label htmlFor=\"user\">Payment memo</label>\r\n\r\n                    <Field\r\n                      as=\"textarea\"\r\n                      name=\"memo\"\r\n                      className={errors.memo && touched.memo ? \"err\" : null}\r\n                    />\r\n                  </FieldWrapper>\r\n\r\n                  <FieldWrapper>\r\n                    <label htmlFor=\"user\">Due Date</label>\r\n\r\n                    <DatePickerField\r\n                      name=\"date\"\r\n                      className={errors.date && touched.date ? \"err\" : null}\r\n                    />\r\n                  </FieldWrapper>\r\n                  <button type=\"submit\">Request Payment</button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </PaymnetForm>\r\n          <PaymnetTbl>\r\n            <SecTitle> Payments list</SecTitle>\r\n            <PaymentTable />\r\n          </PaymnetTbl>\r\n        </Section1>\r\n      </PaymentsWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {};\r\n}\r\nexport default connect(mapStateToProps, {})(Payments);\r\n"],"sourceRoot":""}